/**
 * LIO - Order Management API
 * API de gerenciamento de pedidos da LIO.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.Body;
import io.swagger.client.model.Body1;
import io.swagger.client.model.Body2;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse201;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.OrdersItems;
import io.swagger.client.model.OrdersTransactions;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class OrderManagementApi {
  String basePath = "https://api.cielo.com.br/sandbox-lio/order-management/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Recurso responsável por efetuar a inclusão de um novo item em um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.
   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.
   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.
   * @param id Identificador do pedido.
   * @param body 
   * @return InlineResponse201
  */
  public InlineResponse201 orderAddItem (String clientId, String accessToken, String merchantId, String id, Body1 body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderAddItem",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderAddItem"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderAddItem",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderAddItem"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderAddItem",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderAddItem"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderAddItem",
        new ApiException(400, "Missing the required parameter 'id' when calling orderAddItem"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling orderAddItem",
        new ApiException(400, "Missing the required parameter 'body' when calling orderAddItem"));
    }

    // create path and map variables
    String path = "/orders/{id}/items".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse201) ApiInvoker.deserialize(localVarResponse, "", InlineResponse201.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Recurso responsável por efetuar a inclusão de um novo item em um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.   * @param id Identificador do pedido.   * @param body 
  */
  public void orderAddItem (String clientId, String accessToken, String merchantId, String id, Body1 body, final Response.Listener<InlineResponse201> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderAddItem",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderAddItem"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderAddItem",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderAddItem"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderAddItem",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderAddItem"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderAddItem",
        new ApiException(400, "Missing the required parameter 'id' when calling orderAddItem"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling orderAddItem",
        new ApiException(400, "Missing the required parameter 'body' when calling orderAddItem"));
    }

    // create path and map variables
    String path = "/orders/{id}/items".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse201) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse201.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Recurso responsável por efetuar a criação de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.
   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.
   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.
   * @param body 
   * @return InlineResponse201
  */
  public InlineResponse201 orderCreate (String clientId, String accessToken, String merchantId, Body body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderCreate",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderCreate"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderCreate",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderCreate"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderCreate",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderCreate"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling orderCreate",
        new ApiException(400, "Missing the required parameter 'body' when calling orderCreate"));
    }

    // create path and map variables
    String path = "/orders";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse201) ApiInvoker.deserialize(localVarResponse, "", InlineResponse201.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Recurso responsável por efetuar a criação de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.   * @param body 
  */
  public void orderCreate (String clientId, String accessToken, String merchantId, Body body, final Response.Listener<InlineResponse201> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderCreate",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderCreate"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderCreate",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderCreate"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderCreate",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderCreate"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling orderCreate",
        new ApiException(400, "Missing the required parameter 'body' when calling orderCreate"));
    }

    // create path and map variables
    String path = "/orders".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse201) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse201.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Recurso responsável por efetuar a exclusão de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.
   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.
   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.
   * @param id Identificador do pedido.
   * @return void
  */
  public void orderDelete (String clientId, String accessToken, String merchantId, String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderDelete",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderDelete"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderDelete",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderDelete"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderDelete",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderDelete"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling orderDelete"));
    }

    // create path and map variables
    String path = "/orders/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Recurso responsável por efetuar a exclusão de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.   * @param id Identificador do pedido.
  */
  public void orderDelete (String clientId, String accessToken, String merchantId, String id, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderDelete",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderDelete"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderDelete",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderDelete"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderDelete",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderDelete"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling orderDelete"));
    }

    // create path and map variables
    String path = "/orders/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Recurso responsável por efetuar a exclusão de um item de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.
   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.
   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.
   * @param id Identificador do pedido.
   * @param itemId Identificador do item do pedido.
   * @return InlineResponse201
  */
  public InlineResponse201 orderDeleteItem (String clientId, String accessToken, String merchantId, String id, String itemId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderDeleteItem",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderDeleteItem"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderDeleteItem",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderDeleteItem"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderDeleteItem",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderDeleteItem"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderDeleteItem",
        new ApiException(400, "Missing the required parameter 'id' when calling orderDeleteItem"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling orderDeleteItem",
        new ApiException(400, "Missing the required parameter 'itemId' when calling orderDeleteItem"));
    }

    // create path and map variables
    String path = "/orders/{id}/items/{itemId}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "itemId" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse201) ApiInvoker.deserialize(localVarResponse, "", InlineResponse201.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Recurso responsável por efetuar a exclusão de um item de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.   * @param id Identificador do pedido.   * @param itemId Identificador do item do pedido.
  */
  public void orderDeleteItem (String clientId, String accessToken, String merchantId, String id, String itemId, final Response.Listener<InlineResponse201> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderDeleteItem",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderDeleteItem"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderDeleteItem",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderDeleteItem"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderDeleteItem",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderDeleteItem"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderDeleteItem",
        new ApiException(400, "Missing the required parameter 'id' when calling orderDeleteItem"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling orderDeleteItem",
        new ApiException(400, "Missing the required parameter 'itemId' when calling orderDeleteItem"));
    }

    // create path and map variables
    String path = "/orders/{id}/items/{itemId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "itemId" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse201) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse201.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Recurso responsável por efetuar a consulta de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.
   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.
   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.
   * @param id Identificador do pedido.
   * @return InlineResponse200
  */
  public InlineResponse200 orderGet (String clientId, String accessToken, String merchantId, String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderGet",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderGet"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderGet",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderGet"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderGet",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderGet"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderGet",
        new ApiException(400, "Missing the required parameter 'id' when calling orderGet"));
    }

    // create path and map variables
    String path = "/orders/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Recurso responsável por efetuar a consulta de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.   * @param id Identificador do pedido.
  */
  public void orderGet (String clientId, String accessToken, String merchantId, String id, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderGet",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderGet"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderGet",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderGet"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderGet",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderGet"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderGet",
        new ApiException(400, "Missing the required parameter 'id' when calling orderGet"));
    }

    // create path and map variables
    String path = "/orders/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.
   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.
   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.
   * @param parameters Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED).
   * @return List<InlineResponse200>
  */
  public List<InlineResponse200> orderGetByParameters (String clientId, String accessToken, String merchantId, String parameters) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderGetByParameters",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderGetByParameters"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderGetByParameters",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderGetByParameters"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderGetByParameters",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderGetByParameters"));
    }
    // verify the required parameter 'parameters' is set
    if (parameters == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parameters' when calling orderGetByParameters",
        new ApiException(400, "Missing the required parameter 'parameters' when calling orderGetByParameters"));
    }

    // create path and map variables
    String path = "/orders";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "parameters", parameters));
    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<InlineResponse200>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse200.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Recurso responsável por efetuar a consulta de pedidos, com a possibilidade de aplicar filtros.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.   * @param parameters Parâmetros para filtrar a consulta. Os possíveis parâmetros são: number (Número do pedidos), reference (Referência do pedido) e status (Status do pedidos: DRAFT, ENTERED, CANCELED, PAID, APPROVED, REJECTED, RE-ENTERED e CLOSED).
  */
  public void orderGetByParameters (String clientId, String accessToken, String merchantId, String parameters, final Response.Listener<List<InlineResponse200>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderGetByParameters",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderGetByParameters"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderGetByParameters",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderGetByParameters"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderGetByParameters",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderGetByParameters"));
    }
    // verify the required parameter 'parameters' is set
    if (parameters == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parameters' when calling orderGetByParameters",
        new ApiException(400, "Missing the required parameter 'parameters' when calling orderGetByParameters"));
    }

    // create path and map variables
    String path = "/orders".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "parameters", parameters));

    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<InlineResponse200>) ApiInvoker.deserialize(localVarResponse,  "array", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Recurso responsável por efetuar a consulta de um item em um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.
   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.
   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.
   * @param id Identificador do pedido.
   * @return OrdersItems
  */
  public OrdersItems orderGetItem (String clientId, String accessToken, String merchantId, String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderGetItem",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderGetItem"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderGetItem",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderGetItem"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderGetItem",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderGetItem"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderGetItem",
        new ApiException(400, "Missing the required parameter 'id' when calling orderGetItem"));
    }

    // create path and map variables
    String path = "/orders/{id}/items".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrdersItems) ApiInvoker.deserialize(localVarResponse, "", OrdersItems.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Recurso responsável por efetuar a consulta de um item em um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.   * @param id Identificador do pedido.
  */
  public void orderGetItem (String clientId, String accessToken, String merchantId, String id, final Response.Listener<OrdersItems> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderGetItem",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderGetItem"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderGetItem",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderGetItem"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderGetItem",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderGetItem"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderGetItem",
        new ApiException(400, "Missing the required parameter 'id' when calling orderGetItem"));
    }

    // create path and map variables
    String path = "/orders/{id}/items".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrdersItems) ApiInvoker.deserialize(localVarResponse,  "", OrdersItems.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Recurso responsável por efetuar a consulta das transações de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.
   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.
   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.
   * @param id Identificador do pedido.
   * @return OrdersTransactions
  */
  public OrdersTransactions orderGetTransactions (String clientId, String accessToken, String merchantId, String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderGetTransactions",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderGetTransactions"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderGetTransactions",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderGetTransactions"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderGetTransactions",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderGetTransactions"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderGetTransactions",
        new ApiException(400, "Missing the required parameter 'id' when calling orderGetTransactions"));
    }

    // create path and map variables
    String path = "/orders/{id}/transactions".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrdersTransactions) ApiInvoker.deserialize(localVarResponse, "", OrdersTransactions.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Recurso responsável por efetuar a consulta das transações de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.   * @param id Identificador do pedido.
  */
  public void orderGetTransactions (String clientId, String accessToken, String merchantId, String id, final Response.Listener<OrdersTransactions> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderGetTransactions",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderGetTransactions"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderGetTransactions",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderGetTransactions"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderGetTransactions",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderGetTransactions"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderGetTransactions",
        new ApiException(400, "Missing the required parameter 'id' when calling orderGetTransactions"));
    }

    // create path and map variables
    String path = "/orders/{id}/transactions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrdersTransactions) ApiInvoker.deserialize(localVarResponse,  "", OrdersTransactions.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Recurso responsável por efetuar o cancelamento de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.
   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.
   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.
   * @param id Identificador do pedido.
   * @param operation Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento).
   * @return void
  */
  public void orderUpdate (String clientId, String accessToken, String merchantId, String id, String operation) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderUpdate"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderUpdate"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderUpdate"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'id' when calling orderUpdate"));
    }
    // verify the required parameter 'operation' is set
    if (operation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'operation' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'operation' when calling orderUpdate"));
    }

    // create path and map variables
    String path = "/orders/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "operation", operation));
    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Recurso responsável por efetuar o cancelamento de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.   * @param id Identificador do pedido.   * @param operation Operação que deve ser executada. As possíveis operações são: cancel (cancelamento de um pedido), close (fechamento de um pedido), place (liberação de um pedido para pagamento).
  */
  public void orderUpdate (String clientId, String accessToken, String merchantId, String id, String operation, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderUpdate"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderUpdate"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderUpdate"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'id' when calling orderUpdate"));
    }
    // verify the required parameter 'operation' is set
    if (operation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'operation' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'operation' when calling orderUpdate"));
    }

    // create path and map variables
    String path = "/orders/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "operation", operation));

    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Recurso responsável por efetuar a alteração de um item de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.
   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.
   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.
   * @param id Identificador do pedido.
   * @param itemId Identificador do item do pedido.
   * @param body 
   * @return InlineResponse201
  */
  public InlineResponse201 orderUpdateItem (String clientId, String accessToken, String merchantId, String id, String itemId, Body2 body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderUpdateItem"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderUpdateItem"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderUpdateItem"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'id' when calling orderUpdateItem"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'itemId' when calling orderUpdateItem"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'body' when calling orderUpdateItem"));
    }

    // create path and map variables
    String path = "/orders/{id}/items/{itemId}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "itemId" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse201) ApiInvoker.deserialize(localVarResponse, "", InlineResponse201.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Recurso responsável por efetuar a alteração de um item de um pedido.
   * @param clientId Token da aplicação (APP Token) gerado durante o processo de cadastro.   * @param accessToken Token de acesso (Access Token) gerado durante o processo de cadastro.   * @param merchantId Identificador do estabelecimento comercial gerado durante o processo de cadastro.   * @param id Identificador do pedido.   * @param itemId Identificador do item do pedido.   * @param body 
  */
  public void orderUpdateItem (String clientId, String accessToken, String merchantId, String id, String itemId, Body2 body, final Response.Listener<InlineResponse201> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'clientId' is set
    if (clientId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'clientId' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'clientId' when calling orderUpdateItem"));
    }
    // verify the required parameter 'accessToken' is set
    if (accessToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accessToken' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'accessToken' when calling orderUpdateItem"));
    }
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'merchantId' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'merchantId' when calling orderUpdateItem"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'id' when calling orderUpdateItem"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'itemId' when calling orderUpdateItem"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling orderUpdateItem",
        new ApiException(400, "Missing the required parameter 'body' when calling orderUpdateItem"));
    }

    // create path and map variables
    String path = "/orders/{id}/items/{itemId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "itemId" + "\\}", apiInvoker.escapeString(itemId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("client-id", ApiInvoker.parameterToString(clientId));
    headerParams.put("access-token", ApiInvoker.parameterToString(accessToken));
    headerParams.put("merchant-id", ApiInvoker.parameterToString(merchantId));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "access-token", "client-id", "merchant-id" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse201) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse201.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
