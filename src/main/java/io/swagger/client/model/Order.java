/**
 * LIO - Order Management API
 * API de gerenciamento de pedidos da LIO.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.OrderItem;
import io.swagger.client.model.Transaction;
import java.util.*;
import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Order {
  
  @SerializedName("id")
  private String id = null;
  @SerializedName("number")
  private String number = null;
  @SerializedName("reference")
  private String reference = null;
  public enum StatusEnum {
     DRAFT,  ENTERED,  CANCELED,  PAID,  APPROVED,  REJECTED,  RE-ENTERED,  CLOSED, 
  };
  @SerializedName("status")
  private StatusEnum status = null;
  @SerializedName("created_at")
  private Date createdAt = null;
  @SerializedName("updated_at")
  private Date updatedAt = null;
  @SerializedName("items")
  private List<OrderItem> items = null;
  @SerializedName("notes")
  private String notes = null;
  @SerializedName("transactions")
  private List<Transaction> transactions = null;
  @SerializedName("price")
  private Integer price = null;
  @SerializedName("remaining")
  private Integer remaining = null;

  /**
   * UUID que identifica unicamente o pedido.
   **/
  @ApiModelProperty(required = true, value = "UUID que identifica unicamente o pedido.")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * Número do pedido. Gerelmente esse número representa o identificador do pedido em um sistema externo através da integração com parceiros.
   **/
  @ApiModelProperty(value = "Número do pedido. Gerelmente esse número representa o identificador do pedido em um sistema externo através da integração com parceiros.")
  public String getNumber() {
    return number;
  }
  public void setNumber(String number) {
    this.number = number;
  }

  /**
   * Referência do pedido. Utilizada para facilitar o acesso ou localização do mesmo.
   **/
  @ApiModelProperty(value = "Referência do pedido. Utilizada para facilitar o acesso ou localização do mesmo.")
  public String getReference() {
    return reference;
  }
  public void setReference(String reference) {
    this.reference = reference;
  }

  /**
   * Status do pedido.
   **/
  @ApiModelProperty(required = true, value = "Status do pedido.")
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  /**
   * Data de criação do pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)
   **/
  @ApiModelProperty(required = true, value = "Data de criação do pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)")
  public Date getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  /**
   * Data de última atualização do pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)
   **/
  @ApiModelProperty(required = true, value = "Data de última atualização do pedido. A data deve estar no formato: YYYY-MM-DDThh:mm:ssZ (Exemplo: 20151020T13:13:29.000Z)")
  public Date getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(Date updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * Lista de itens contidos no pedido.
   **/
  @ApiModelProperty(required = true, value = "Lista de itens contidos no pedido.")
  public List<OrderItem> getItems() {
    return items;
  }
  public void setItems(List<OrderItem> items) {
    this.items = items;
  }

  /**
   * Campo disponível para uso do Merchant para comunicação.
   **/
  @ApiModelProperty(value = "Campo disponível para uso do Merchant para comunicação.")
  public String getNotes() {
    return notes;
  }
  public void setNotes(String notes) {
    this.notes = notes;
  }

  /**
   * Lista de transações de pagamento (ou outros tipos) efetuadas no pedido.
   **/
  @ApiModelProperty(required = true, value = "Lista de transações de pagamento (ou outros tipos) efetuadas no pedido.")
  public List<Transaction> getTransactions() {
    return transactions;
  }
  public void setTransactions(List<Transaction> transactions) {
    this.transactions = transactions;
  }

  /**
   * Valor total do pedido. Exemplo: O valor de R$ 10,00 é representado como 1000.
   **/
  @ApiModelProperty(required = true, value = "Valor total do pedido. Exemplo: O valor de R$ 10,00 é representado como 1000.")
  public Integer getPrice() {
    return price;
  }
  public void setPrice(Integer price) {
    this.price = price;
  }

  /**
   * Valor restante do pagamento do pedido.Exemplo: O valor de R$ 10,00 é representado como 1000.
   **/
  @ApiModelProperty(required = true, value = "Valor restante do pagamento do pedido.Exemplo: O valor de R$ 10,00 é representado como 1000.")
  public Integer getRemaining() {
    return remaining;
  }
  public void setRemaining(Integer remaining) {
    this.remaining = remaining;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return (this.id == null ? order.id == null : this.id.equals(order.id)) &&
        (this.number == null ? order.number == null : this.number.equals(order.number)) &&
        (this.reference == null ? order.reference == null : this.reference.equals(order.reference)) &&
        (this.status == null ? order.status == null : this.status.equals(order.status)) &&
        (this.createdAt == null ? order.createdAt == null : this.createdAt.equals(order.createdAt)) &&
        (this.updatedAt == null ? order.updatedAt == null : this.updatedAt.equals(order.updatedAt)) &&
        (this.items == null ? order.items == null : this.items.equals(order.items)) &&
        (this.notes == null ? order.notes == null : this.notes.equals(order.notes)) &&
        (this.transactions == null ? order.transactions == null : this.transactions.equals(order.transactions)) &&
        (this.price == null ? order.price == null : this.price.equals(order.price)) &&
        (this.remaining == null ? order.remaining == null : this.remaining.equals(order.remaining));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.number == null ? 0: this.number.hashCode());
    result = 31 * result + (this.reference == null ? 0: this.reference.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.createdAt == null ? 0: this.createdAt.hashCode());
    result = 31 * result + (this.updatedAt == null ? 0: this.updatedAt.hashCode());
    result = 31 * result + (this.items == null ? 0: this.items.hashCode());
    result = 31 * result + (this.notes == null ? 0: this.notes.hashCode());
    result = 31 * result + (this.transactions == null ? 0: this.transactions.hashCode());
    result = 31 * result + (this.price == null ? 0: this.price.hashCode());
    result = 31 * result + (this.remaining == null ? 0: this.remaining.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  number: ").append(number).append("\n");
    sb.append("  reference: ").append(reference).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  createdAt: ").append(createdAt).append("\n");
    sb.append("  updatedAt: ").append(updatedAt).append("\n");
    sb.append("  items: ").append(items).append("\n");
    sb.append("  notes: ").append(notes).append("\n");
    sb.append("  transactions: ").append(transactions).append("\n");
    sb.append("  price: ").append(price).append("\n");
    sb.append("  remaining: ").append(remaining).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
